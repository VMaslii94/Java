plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.testng', name: 'testng', version: '6.0.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
}

test {
    //       dependsOn 'generateSuiteXml'
    //        systemProperties project.properties.subMap("BrowserName");
    useTestNG() {
        suites 'src/test/resources/testng.xml'
        useDefaultListeners = true
        outputDirectory = file(("$projectDir/TestResultReport/Test"))
    }

    // options.suites('src/test/resources/testng.xml')


}

//task generateSuiteXml() {
//    //Get browser from system param or set as default
//    boolean isBrowserProp = project.hasProperty("browserName");
//    String browser = isBrowserProp ? project.getProperty("browserName") : "chrome";
//    configuredTestNGXml(browser)
//}


def configuredTestNGXml(String param) {
    def xmlInputFile = "src/test/resources/testng.xml"
    def xmlOutputFile = "src/test/resources/testng-temp.xml"

    def parser = new XmlParser()
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
    def suite = parser.parse(projectDir.absolutePath + "/" + xmlInputFile)

    // Select browser as editing parameter in  new template XML file
    if (param) {
        suite.parameter
                .findAll { it.'@name' == 'browser' }
                .each { browserParam ->
                    // browserParam.parent().remove(test)
                    browserParam.'@value' = param
                }
    }

//        if (project.hasProperty('groups')) {
//            def groups = project.property('groups').split(',')
//            suite.test.each { test ->
////            <groups> and <run> tags are already exist in every test
////            test.children().add(test.parameter.size(), new Node(null, "groups", []))
////            new Node(test.groups[0], 'run')
//                groups.each { group ->
//                    new Node(test.groups.run[0], 'include', [name: group])
//                }
//            }
//        }
//        // Delete IE tests if local run
//        if (!System.properties.containsKey('grid.url')) {
//            suite.test
//                    .findAll { it.parameter[0].'@value' == 'ie' }
//                    .each { test -> test.parent().remove(test) }
//        }

    def writer = new FileWriter(projectDir.absolutePath + "/" + xmlOutputFile)
    writer << '<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >\n'
    new XmlNodePrinter(new PrintWriter(writer)).print(suite)

    return xmlOutputFile

//    useTestNG() {
//
//        suites "src/test/resources/testng.xml"
//        useDefaultListeners = true
//        outputDirectory = file(("$projectDir/TestResultReport/Test"))
//    }
    // options.suites("src/test/resources/testng.xml")

}

task smokeTests(type: Test) { // we define a task with name ‘smokeTests’
    group = 'myTestGroup'
    description = 'My new smoke task created'
    useTestNG() {
        suites 'src/test/resources/testng.xml'
        includeGroups 'all' // We define the group name by using ‘includeGroups’ parameter.
        useDefaultListeners = true
        outputDirectory = file(("$projectDir/TestResultReport/SmokeTest"))
    }
    reports.html.setDestination(file("$projectDir/TestResultReport/GradleReport")) //Reporter from Gradle framework
}

//tasks.withType(Test) {
//   systemProperty 'BrowserName', System.getProperty("BrowserName", "chrome")}
//
//    task runWithChrome(type: Test) {

//         useTestNG() {
//             suites "src/test/resources/testng.xml"
//             useDefaultListeners = true
//             outputDirectory = file(("$projectDir/TestResultReport/Test"))
//         }
////        systemProperties = [BrowserName: System.getProperty('BrowserName', 'chrome')]
//    }
//
//    task runWithFirefox(type: Test) {
//
//    }
